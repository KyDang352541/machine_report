import streamlit as st 
import pandas as pd
import plotly.express as px

# === ƒê·ªçc to√†n b·ªô sheet v√† g·ªôp v√†o m·ªôt DataFrame
def load_all_data(file):
    try:
        xls = pd.ExcelFile(file)
        all_dfs = []

        for sheet_name in xls.sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet_name, header=0)

            df.columns = df.columns.map(str).str.strip()
            df = df.loc[:, ~df.columns.map(str).str.contains("^Unnamed")]
            df["Lo·∫°i m√°y"] = sheet_name

            # Chuy·ªÉn ƒë·ªãnh d·∫°ng ng√†y
            if "Ng√†y/Date" in df.columns:
                df["Ng√†y/Date"] = pd.to_datetime(df["Ng√†y/Date"], errors="coerce", dayfirst=True)

            # S·ª≠a l·ªói SL/Qty
            if "SL/Qty" in df.columns:
                df["SL/Qty"] = df["SL/Qty"].astype(str).str.extract(r"(\d+(?:\.\d+)?)")
                df["SL/Qty"] = pd.to_numeric(df["SL/Qty"], errors="coerce")

            # Th√™m c·ªôt gi·ªù
            col_min = "T·ªïng th·ªùi gian gia c√¥ng/Total machining time (min)"
            if col_min in df.columns:
                df[col_min] = pd.to_numeric(df[col_min], errors="coerce")
                df["Th·ªùi gian (gi·ªù)/Total time (hr)"] = df[col_min] / 60

            all_dfs.append(df)

        df_all = pd.concat(all_dfs, ignore_index=True)
        return df_all

    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file Excel: {e}")
        return pd.DataFrame()

# === BI·ªÇU ƒê·ªí C·ªòT
def plot_bar(df, project_name, selected_machines):
    col_machine = "Machine/m√°y"
    col_hour = "Th·ªùi gian (gi·ªù)/Total time (hr)"

    df_group = (
        df[df[col_machine].isin(selected_machines)]
        .groupby(col_machine)[col_hour]
        .sum()
        .reset_index()
    )

    fig = px.bar(
        df_group,
        x=col_machine,
        y=col_hour,
        text_auto=".2f",
        color=col_machine,
        title=f"üìä T·ªïng th·ªùi gian (gi·ªù) theo m√°y - D·ª± √°n {project_name}",
        labels={col_hour: "T·ªïng th·ªùi gian (gi·ªù)"}
    )
    st.plotly_chart(fig, use_container_width=True)

# === BI·ªÇU ƒê·ªí SUNBURST
def plot_sunburst(df, selected_machines):
    col_machine = "Machine/m√°y"
    col_desc = "M√¥ t·∫£/Description"
    col_hour = "Th·ªùi gian (gi·ªù)/Total time (hr)"

    if any(col not in df.columns for col in [col_machine, col_desc, col_hour]):
        st.warning("‚ö†Ô∏è Thi·∫øu c·ªôt ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì ph√¢n c·∫•p.")
        return

    df_sun = df[df[col_machine].isin(selected_machines)]

    fig = px.sunburst(
        df_sun,
        path=[col_machine, col_desc],
        values=col_hour,
        title="üåÄ Ph√¢n b·ªï th·ªùi gian (gi·ªù) theo M√°y v√† Task",
        labels={col_hour: "Gi·ªù"}
    )
    st.plotly_chart(fig, use_container_width=True)

# === APP CH√çNH
def main():
    st.set_page_config(page_title="üìÇ Machine Report Viewer", layout="wide")
    st.title("üìÑ B√°o c√°o th·ªùi gian gia c√¥ng to√†n b·ªô m√°y v√† d·ª± √°n")

    uploaded_file = st.file_uploader("üì§ T·∫£i l√™n file Excel", type=["xlsx"])
    if not uploaded_file:
        return

    df_all = load_all_data(uploaded_file)
    if df_all.empty:
        return

    col_project = "M√£ d·ª± √°n/Project"
    col_machine = "Machine/m√°y"

    if col_project not in df_all.columns or col_machine not in df_all.columns:
        st.error(f"‚ùå Thi·∫øu c·ªôt '{col_project}' ho·∫∑c '{col_machine}'.")
        st.write("C·ªôt hi·ªán c√≥:", df_all.columns.tolist())
        return

    available_projects = df_all[col_project].dropna().unique().tolist()
    selected_project = st.selectbox("üìÅ Ch·ªçn d·ª± √°n", available_projects)

    df_project = df_all[df_all[col_project] == selected_project]

    available_machines = df_project[col_machine].dropna().unique().tolist()
    selected_machines = st.multiselect("üîß Ch·ªçn m√°y c·∫ßn xem", available_machines, default=available_machines)

    if not selected_machines:
        st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√°y.")
        return

    df_filtered = df_project[df_project[col_machine].isin(selected_machines)]

    # üìã Hi·ªÉn th·ªã b·∫£ng
    st.markdown("### üìÑ D·ªØ li·ªáu chi ti·∫øt ƒë√£ l·ªçc")
    st.dataframe(df_filtered, use_container_width=True)

    # üìä Bi·ªÉu ƒë·ªì
    st.markdown("### üìä T·ªïng th·ªùi gian theo m√°y")
    plot_bar(df_filtered, selected_project, selected_machines)

    st.markdown("### üåÄ Ph√¢n b·ªï th·ªùi gian theo m√¥ t·∫£")
    plot_sunburst(df_filtered, selected_machines)

if __name__ == "__main__":
    main()
